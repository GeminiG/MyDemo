package com.example.demo.mysqltest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

@RestController
@RequestMapping("mysql")
public class MySQLTestController {

    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    @Autowired
    JdbcTemplate jdbcTemplate;

    String data = "(NULL,'接收处理机（RPP）到信道处理器（CHP）的主集，分集上行数据校验均错(DSP0)','1','3','3','{EVENT_TIME}',NULL,'2a233a98f35e453dafa20cac828f5f8b',NULL,NULL,'2568','{\\\"en\\\":\\\"memory useage:18%;memory threshold:1%\\\",\\\"zh\\\":\\\"业务内存三级负荷\\\"}','31451',NULL,'BSC',NULL,NULL,NULL,'host=CO1/HOST/01,vmname=CO1/VM/02,vnfcname=CO1/VNFC/01,ms=VRU_TMSP_AGT_5',NULL,'NA','{ALARM_SIGNAL}','2a233a98f35e453dafa20cac828f5f8bZTE','2a233a98f35e453dafa20cac828f5f8bZTE','2020-07-22 13:58:30.0','ZTE',NULL,'gidwy20191227MME0002',NULL,NULL,NULL,NULL,'CORE','V2.97','3','008-012-00-102568',NULL,NULL,'1','1','1','5','4','接收处理机（RPP）到信道处理器（CHP）的主集，分集上行数据校验均错(DSP0)',NULL,'Y',NULL,NULL,'0',NULL,NULL,'',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)\n";

    String[] startTimeStrs = {"2020-07-13 00:00:00", "2020-07-13 01:00:00", "2020-07-13 02:00:00", "2020-07-13 03:00:00", "2020-07-13 04:00:00", "2020-07-13 05:00:00", "2020-07-13 06:00:00",
            "2020-07-13 07:00:00", "2020-07-13 08:00:00", "2020-07-13 09:00:00", "2020-07-13 10:00:00", "2020-07-13 11:00:00", "2020-07-13 12:00:00", "2020-07-13 13:00:00", "2020-07-13 14:00:00"};
    String[] endTimeStrs = {"2020-07-13 00:59:59", "2020-07-13 01:59:59", "2020-07-13 02:59:59", "2020-07-13 03:59:59", "2020-07-13 04:59:59", "2020-07-13 05:59:59", "2020-07-13 06:59:59",
            "2020-07-13 07:59:59", "2020-07-13 08:59:59", "2020-07-13 09:59:59", "2020-07-13 10:59:59", "2020-07-13 11:59:59", "2020-07-13 12:59:59", "2020-07-13 13:59:59", "2020-07-13 14:59:59"};


    String[] startTimeStrs2 = {"2020-07-12 00:00:00", "2020-07-13 00:00:00", "2020-07-14 00:00:00", "2020-07-15 00:00:00", "2020-07-16 00:00:00", "2020-07-17 00:00:00", "2020-07-18 00:00:00"};
    String[] endTimeStrs2 = {"2020-07-12 23:59:59", "2020-07-13 01:59:59", "2020-07-14 23:59:59", "2020-07-15 23:59:59", "2020-07-16 23:59:59", "2020-07-17 23:59:59", "2020-07-18 23:59:59"};

    int partitionNum = 15;

    @PutMapping("insert")
    public void insert() throws ParseException {

        int signalInsertAlarms = 4000;
        int insertTime = 500;

        for (int p = 8; p < partitionNum; p++) {
            for (int time = 0; time < insertTime; time++) {
                StringBuffer sb = new StringBuffer("INSERT INTO fm_alarm (DB_ID,ORG_ALARM_TITLE,ORG_ALARM_STATUS,ORG_ALARM_TYPE,ORG_SEVERITY,ORG_EVENT_TIME,ORG_CLEAR_TIME,ORG_ALARM_ID,ORG_ALARM_CODE,ORG_ALARM_CODE_NAME,ORG_SPECIFIC_PROBLEM_ID,ORG_SPECIFIC_PROBLEM,ORG_NE_UID,ORG_NE_NAME,ORG_NE_TYPE,ORG_OBJECT_UID,ORG_OBJECT_NAME,ORG_OBJECT_TYPE,ORG_LOCATION_INFO,ORG_ADDITIONAL_INFO,ORG_NETWORK_SLICE_ID,PHD_ALARM_SIGNAL,PHD_FP,PHD_C_FP,PHD_DISCOVERY_TIME,PHD_VENDOR_ID,PHD_ALARM_SOURCE,PHD_GID,RES_CITY_ID,RES_AREA_ID,RES_SITE_ID,RES_ROOM_ID,STD_SPECIALTY_TYPE,STD_VENDOR_VERSION,STD_INMS_SEVERITY,STD_INMS_ALARM_ID,STD_ALARM_EXPLAIN,STD_ALARM_REPAIR_ADVICE,STD_ALARM_TYPE,STD_ALARM_LOGIC_TYPE,STD_ALARM_LOGIC_SUB_TYPE,STD_EFFECT_NE,STD_EFFECT_SERVICE,STD_ALARM_NAME,STD_SEND_IT_FLAG,STD_FLAG,PROJ_NUM,PROJ_NAME,PRS_ACK_FLAG,PRS_FORWARD_FLAG,PRS_TT_ID,PRS_TT_FLAG,PRS_NOTICE_FLAG,PRS_PREPROCESS_FLAG,PRS_RELATED_RULE_SET_ID,PRS_RELATED_RULE_TYPE,PRS_RELATED_RULE_ID,PRS_RELATED_RULE_NAME,PRS_RELATED_DATE,PRS_P_ALARM_SIGNAL,PRS_COMPRESSION_KEY,PRS_COMPRESSION_ALARM_NUM,PRS_SCAN_FLAG,PRS_FILTER_FLAG,PRS_REMARK_FLAG,PRS_LOAD_DB_TIME) VALUES \n");

                for (int i = 0; i < signalInsertAlarms; i++) {
                    String newData = data.replace("{EVENT_TIME}", sdf.format(randomDate(startTimeStrs[p], endTimeStrs[p])));
                    newData = newData.replace("{ALARM_SIGNAL}", time * signalInsertAlarms + i + "");
                    sb.append(newData);
                    sb.append(",");
                }

                jdbcTemplate.update(sb.toString().substring(0, sb.toString().length() - 1));
            }
        }
    }

    @PutMapping("testI")
    public void testInsert() throws ParseException {
        Long startTime = System.currentTimeMillis();

        int signalInsertAlarms = 3000;
        int startAlarm = 100000000;

        StringBuffer sb = new StringBuffer("INSERT INTO fm_alarm (DB_ID,ORG_ALARM_TITLE,ORG_ALARM_STATUS,ORG_ALARM_TYPE,ORG_SEVERITY,ORG_EVENT_TIME,ORG_CLEAR_TIME,ORG_ALARM_ID,ORG_ALARM_CODE,ORG_ALARM_CODE_NAME,ORG_SPECIFIC_PROBLEM_ID,ORG_SPECIFIC_PROBLEM,ORG_NE_UID,ORG_NE_NAME,ORG_NE_TYPE,ORG_OBJECT_UID,ORG_OBJECT_NAME,ORG_OBJECT_TYPE,ORG_LOCATION_INFO,ORG_ADDITIONAL_INFO,ORG_NETWORK_SLICE_ID,PHD_ALARM_SIGNAL,PHD_FP,PHD_C_FP,PHD_DISCOVERY_TIME,PHD_VENDOR_ID,PHD_ALARM_SOURCE,PHD_GID,RES_CITY_ID,RES_AREA_ID,RES_SITE_ID,RES_ROOM_ID,STD_SPECIALTY_TYPE,STD_VENDOR_VERSION,STD_INMS_SEVERITY,STD_INMS_ALARM_ID,STD_ALARM_EXPLAIN,STD_ALARM_REPAIR_ADVICE,STD_ALARM_TYPE,STD_ALARM_LOGIC_TYPE,STD_ALARM_LOGIC_SUB_TYPE,STD_EFFECT_NE,STD_EFFECT_SERVICE,STD_ALARM_NAME,STD_SEND_IT_FLAG,STD_FLAG,PROJ_NUM,PROJ_NAME,PRS_ACK_FLAG,PRS_FORWARD_FLAG,PRS_TT_ID,PRS_TT_FLAG,PRS_NOTICE_FLAG,PRS_PREPROCESS_FLAG,PRS_RELATED_RULE_SET_ID,PRS_RELATED_RULE_TYPE,PRS_RELATED_RULE_ID,PRS_RELATED_RULE_NAME,PRS_RELATED_DATE,PRS_P_ALARM_SIGNAL,PRS_COMPRESSION_KEY,PRS_COMPRESSION_ALARM_NUM,PRS_SCAN_FLAG,PRS_FILTER_FLAG,PRS_REMARK_FLAG,PRS_LOAD_DB_TIME) VALUES \n");

        for (int i = 0; i < signalInsertAlarms; i++) {
            String newData = data.replace("{EVENT_TIME}", sdf.format(randomDate(startTimeStrs[0], endTimeStrs[0])));
            newData = newData.replace("{ALARM_SIGNAL}", startAlarm + i + "");
            sb.append(newData);
            sb.append(",");
        }

        jdbcTemplate.update(sb.toString().substring(0, sb.toString().length() - 1));

        Long endTime = System.currentTimeMillis();

        System.out.println("插入共耗时： " + (endTime - startTime));

    }

    @PutMapping("testU")
    public void testUpdate() throws ParseException {
        Long startTime = System.currentTimeMillis();

        int signalInsertAlarms = 300;
        int updateTime = 10;
        int startAlarm = 100000000;

        for (int time = 0; time < updateTime; time++) {
            StringBuffer sb = new StringBuffer("UPDATE fm_alarm SET PRS_RELATED_RULE_NAME = 'TEST_RULE_NAME' , PRS_RELATED_RULE_TYPE = '1', PRS_RELATED_RULE_ID = '11'  WHERE PHD_ALARM_SIGNAL IN (");
            for (int i = 0; i < signalInsertAlarms; i++) {
                sb.append("'");
                sb.append(startAlarm + signalInsertAlarms * time + i + "");
                sb.append("',");
            }
            sb.deleteCharAt(sb.toString().length()-1);
            sb.append(")");

            System.out.println(jdbcTemplate.update(sb.toString()));
        }

        Long endTime = System.currentTimeMillis();

        System.out.println("插入共耗时： " + (endTime - startTime));

    }

    @PutMapping("testD")
    public void testDelete() throws ParseException {
        Long startTime = System.currentTimeMillis();

        int signalInsertAlarms = 300;
        int insertTime = 10;
        int startAlarm = 100000000;


        for (int time = 0; time < insertTime; time++ ) {
            StringBuffer sb = new StringBuffer("DELETE FROM fm_alarm WHERE PHD_ALARM_SIGNAL IN (");
            for (int i = 0; i < signalInsertAlarms; i++) {
                sb.append("'");
                sb.append(startAlarm + signalInsertAlarms * time + i + "");
                sb.append("',");
            }
            sb.deleteCharAt(sb.toString().length()-1);
            sb.append(")");

            System.out.println(jdbcTemplate.update(sb.toString()));
        }

        Long endTime = System.currentTimeMillis();

        System.out.println("删除共耗时： " + (endTime - startTime));

    }

    @PutMapping("testQ")
    public void queryTest() {
        String sql1 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql2 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_ALARM_SIGNAL like '%%1%%' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql3 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_ALARM_SIGNAL like '%%1%%' and PHD_VENDOR_ID = 'ZTE' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql4 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_ALARM_SIGNAL like '%%1%%' and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO'  order by ORG_EVENT_TIME desc limit 0, 500";
        String sql5 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_ALARM_SIGNAL like '%%1%%' and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1'  order by ORG_EVENT_TIME desc limit 0, 500";
        String sql6 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_ALARM_SIGNAL like '%%1%%' and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql7 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_ALARM_SIGNAL like '%%1%%' and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql8 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_ALARM_SIGNAL like '%%1%%' and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' and RES_CITY_ID in ('1002') order by ORG_EVENT_TIME desc limit 0, 500    ";
        String sql9 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_ALARM_SIGNAL like '%%1%%' and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' and RES_CITY_ID in ('1002') and ORG_OBJECT_NAME in ('Server(X32)-UPF-04') order by ORG_EVENT_TIME desc limit 0, 500";
        String sql10 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_ALARM_SIGNAL like '%%1%%' and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' and RES_CITY_ID in ('1002') and ORG_OBJECT_NAME in ('Server(X32)-UPF-04') and ORG_ALARM_TITLE like '%%11%%' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql11 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_ALARM_SIGNAL like '%%1%%' and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' and RES_CITY_ID in ('1002') and ORG_OBJECT_NAME in ('Server(X32)-UPF-04') and ORG_ALARM_TITLE like '%%11%%' and ORG_ALARM_TYPE = '1' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql12 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' and RES_CITY_ID in ('1002') and ORG_OBJECT_NAME in ('Server(X32)-UPF-04') and ORG_ALARM_TITLE like '%%11%%' and ORG_ALARM_TYPE = '1' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql13 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_ALARM_SIGNAL like '%%1%%' and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' and RES_CITY_ID in ('1002') and ORG_OBJECT_NAME in ('Server(X32)-UPF-04') and ORG_ALARM_TITLE like '%%11%%' and ORG_ALARM_TYPE = '1' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql14 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' and RES_CITY_ID in ('1002') and ORG_OBJECT_NAME in ('Server(X32)-UPF-04') and ORG_ALARM_TITLE like '%%11%%' and ORG_ALARM_TYPE = '1' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql15 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' and RES_CITY_ID in ('1002') and ORG_OBJECT_NAME in ('Server(X32)-UPF-04') and ORG_ALARM_TITLE like '%%11%%' and ORG_ALARM_TYPE = '1' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql16 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59'  and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' and RES_CITY_ID in ('1002') and ORG_OBJECT_NAME in ('Server(X32)-UPF-04') and ORG_ALARM_TITLE like '%%11%%' and ORG_ALARM_TYPE = '1' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql17 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' and RES_CITY_ID in ('1002') and ORG_OBJECT_NAME in ('Server(X32)-UPF-04') and ORG_ALARM_TYPE = '1' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql18 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59' and PHD_ALARM_SIGNAL like '%%1%%' and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' and RES_CITY_ID in ('1002') and ORG_OBJECT_NAME in ('Server(X32)-UPF-04') and ORG_ALARM_TITLE like '%%11%%' order by ORG_EVENT_TIME desc limit 0, 500";
        String sql19 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 and ORG_EVENT_TIME > '2020-07-13 00:00:00' and ORG_EVENT_TIME < '2020-07-15 23:59:59'  and PHD_VENDOR_ID = 'ZTE' and STD_SPECIALTY_TYPE = 'MICRO' and STD_INMS_SEVERITY = '1' and PRS_ACK_FLAG = '1' and PRS_FORWARD_FLAG = '0' and RES_CITY_ID in ('1002') and ORG_OBJECT_NAME in ('Server(X32)-UPF-04') order by ORG_EVENT_TIME desc limit 0, 500";
        String sql20 = "select `ID`, `DB_ID`, `ORG_ALARM_TITLE`, `ORG_ALARM_STATUS`, `ORG_ALARM_TYPE` , `ORG_SEVERITY`, `ORG_EVENT_TIME`, `ORG_ALARM_ID`, `ORG_SPECIFIC_PROBLEM_ID`, `ORG_SPECIFIC_PROBLEM` , `ORG_NE_UID`, `ORG_NE_NAME`, `ORG_NE_TYPE`, `ORG_CLEAR_TIME`, `ORG_OBJECT_UID` , `ORG_OBJECT_NAME`, `ORG_OBJECT_TYPE`, `ORG_LOCATION_INFO`, `ORG_ADDITIONAL_INFO`, `ORG_NETWORK_SLICE_ID` , `PHD_ALARM_SIGNAL`, `PHD_FP`, `PHD_C_FP`, `PHD_DISCOVERY_TIME`, `PHD_VENDOR_ID` , `PHD_GID`, `RES_CITY_ID`, `RES_SITE_ID`, `RES_ROOM_ID`, `STD_SPECIALTY_TYPE` , `STD_VENDOR_VERSION`, `STD_INMS_SEVERITY`, `STD_INMS_ALARM_ID`, `STD_ALARM_EXPLAIN`, `STD_ALARM_REPAIR_ADVICE` , `STD_ALARM_TYPE`, `STD_ALARM_LOGIC_TYPE`, `STD_ALARM_LOGIC_SUB_TYPE`, `STD_EFFECT_NE`, `STD_EFFECT_SERVICE` , `STD_ALARM_NAME`, `STD_SEND_IT_FLAG`, `STD_FLAG`, `PROJ_NUM`, `PROJ_NAME` , `PRS_ACK_FLAG`, `PRS_FORWARD_FLAG`, `PRS_TT_ID`, `PRS_TT_FLAG`, `PRS_NOTICE_FLAG` , `PRS_PREPROCESS_FLAG`, `PRS_RELATED_RULE_TYPE`, `PRS_RELATED_RULE_ID`, `PRS_RELATED_RULE_NAME`, `PRS_RELATED_DATE` , `PRS_P_ALARM_SIGNAL`, `PRS_COMPRESSION_KEY`, `PRS_COMPRESSION_ALARM_NUM`, `PRS_REMARK_FLAG`, `PRS_LOAD_DB_TIME` from fm_alarm t where 1 = 1 order by ORG_EVENT_TIME desc limit 0, 500";
        Long startTime = System.currentTimeMillis();
        jdbcTemplate.execute(sql1);
        Long endTime1 = System.currentTimeMillis();
        System.out.println("第1次查询耗时： " + (endTime1 - startTime));
        jdbcTemplate.execute(sql2);
        Long endTime2 = System.currentTimeMillis();
        System.out.println("第2次查询耗时： " + (endTime2 - endTime1));
        jdbcTemplate.execute(sql3);
        Long endTime3 = System.currentTimeMillis();
        System.out.println("第3次查询耗时： " + (endTime3 - endTime2));
        jdbcTemplate.execute(sql4);
        Long endTime4 = System.currentTimeMillis();
        System.out.println("第4次查询耗时： " + (endTime4 - endTime3));
        jdbcTemplate.execute(sql5);
        Long endTime5 = System.currentTimeMillis();
        System.out.println("第5次查询耗时： " + (endTime5 - endTime4));
        jdbcTemplate.execute(sql6);
        Long endTime6 = System.currentTimeMillis();
        System.out.println("第6次查询耗时： " + (endTime6 - endTime5));
        jdbcTemplate.execute(sql7);
        Long endTime7 = System.currentTimeMillis();
        System.out.println("第7次查询耗时： " + (endTime7 - endTime6));
        jdbcTemplate.execute(sql8);
        Long endTime8 = System.currentTimeMillis();
        System.out.println("第8次查询耗时： " + (endTime8 - endTime7));
        jdbcTemplate.execute(sql9);
        Long endTime9 = System.currentTimeMillis();
        System.out.println("第9次查询耗时： " + (endTime9 - endTime8));
        jdbcTemplate.execute(sql10);
        Long endTime10 = System.currentTimeMillis();
        System.out.println("第10次查询耗时： " + (endTime10 - endTime9));
        jdbcTemplate.execute(sql11);
        Long endTime11 = System.currentTimeMillis();
        System.out.println("第11次查询耗时： " + (endTime11 - endTime10));
        jdbcTemplate.execute(sql12);
        Long endTime12 = System.currentTimeMillis();
        System.out.println("第12次查询耗时： " + (endTime12 - endTime11));
        jdbcTemplate.execute(sql13);
        Long endTime13 = System.currentTimeMillis();
        System.out.println("第13次查询耗时： " + (endTime13 - endTime12));
        jdbcTemplate.execute(sql14);
        Long endTime14 = System.currentTimeMillis();
        System.out.println("第14次查询耗时： " + (endTime14 - endTime13));
        jdbcTemplate.execute(sql15);
        Long endTime15 = System.currentTimeMillis();
        System.out.println("第15次查询耗时： " + (endTime15 - endTime14));
        jdbcTemplate.execute(sql16);
        Long endTime16 = System.currentTimeMillis();
        System.out.println("第16次查询耗时： " + (endTime16 - endTime15));
        jdbcTemplate.execute(sql17);
        Long endTime17 = System.currentTimeMillis();
        System.out.println("第17次查询耗时： " + (endTime17 - endTime16));
        jdbcTemplate.execute(sql18);
        Long endTime18 = System.currentTimeMillis();
        System.out.println("第18次查询耗时： " + (endTime18 - endTime17));
        jdbcTemplate.execute(sql19);
        Long endTime19 = System.currentTimeMillis();
        System.out.println("第19次查询耗时： " + (endTime19 - endTime18));
        jdbcTemplate.execute(sql20);
        Long endTime20 = System.currentTimeMillis();
        System.out.println("第20次查询耗时： " + (endTime20 - endTime19));
        System.out.println("20次查询总共耗时： " + (endTime20 - startTime) + "， 平均耗时: " + (endTime20 - startTime) / 20);
    }

    /**
     * 生成随机时间
     *
     * @param beginDate
     * @param endDate
     * @return
     */
    public Date randomDate(String beginDate, String endDate) {
        try {
            Date start = sdf.parse(beginDate);// 构造开始日期
            Date end = sdf.parse(endDate);// 构造结束日期
            // getTime()表示返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。
            if (start.getTime() >= end.getTime()) {
                return null;
            }
            long date = random(start.getTime(), end.getTime());
            return new Date(date);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public long random(long begin, long end) {
        long rtn = begin + (long) (Math.random() * (end - begin));
        // 如果返回的是开始时间和结束时间，则递归调用本函数查找随机值
        if (rtn == begin || rtn == end) {
            return random(begin, end);
        }
        return rtn;
    }

}
